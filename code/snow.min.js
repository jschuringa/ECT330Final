'use strict';

var snow = angular.module("snow",['ngRoute']);

snow.config(['$routeProvider',function($routeProvider){
    var root = '/resources/angular/files';

    $routeProvider.when('/',{
        templateUrl:root + '/landing/landing.html',
        controller:'landingCtrl'
    }).when('/information',{
        templateUrl:root + '/information/information.html'
    }).when('/login',{
        templateUrl:root + '/login/login.html',
        controller:'loginCtrl'
    }).when('/signup',{
        templateUrl:root + '/signup/signup.html',
        controller:'signupCtrl'
    }).when('/checkout',{
        templateUrl:root + '/checkout/checkout.html',
        controller:'checkoutCtrl'
    }).otherwise('/');
}]);
'use strict';

snow.factory('authInterceptor',['userFactory',function(userFactory){
    return {
        'request':function(config){
            if(config.headers.Authorization === undefined){//headers aren't set
                config.headers.Authorization = userFactory.getAuth();
            }

            return config;
        }
    }
}]);

snow.config(['$httpProvider',function($httpProvider){
    $httpProvider.interceptors.push('authInterceptor');
}]);
'use strict';

snow.directive('navDir',['$location',function($location){
    return {
        link:function(scope,element,attr){
            element.click(function(){
                $location.path(attr.navDir);
                if(!scope.$$phase){
                    scope.$apply();
                }
            });
        }
    };
}]);
'use strict';

snow.directive('shoppingDir',['userFactory','$http','$rootScope',function(userFactory,$http,$rootScope){
    return {
        scope:true,
        link:function(scope){
            scope.shoppingNum = refreshCount();

            $rootScope.$on('updateCart',function(){
                scope.shoppingNum = refreshCount();
            });

            function refreshCount(){
                var user = userFactory.getUser();

                if(user !== null){
                    return user.orders.length;
                }else{
                    return 0;
                }
            }
        }
    };
}]);
'use strict';

snow.factory('userFactory',['$rootScope',function($rootScope){
    var user = localStorage.getItem('user');

    if(user !== null && user.length !== 0){
        user = JSON.parse(user);
        $rootScope.name = user.firstName + ' ' + user.lastName;
    }

    return {
        getAuth:getAuth,
        getUser:getUser,
        setUser:setUser,
        updateUser:updateUser
    };

    function getAuth(){
        if(user !== null){
            return 'Basic ' + window.btoa(user.username + ':' + user.password);
        }else{
            return null;
        }

    }

    function getUser(){
        return user;
    }

    function setUser(inUser){
        user = inUser;
        updateUser();
        $rootScope.name = user.firstName + ' ' + user.lastName;
    }

    function updateUser(){
        localStorage.setItem('user',JSON.stringify(user));
    }
}]);
'use strict';

snow.directive('highlightDir',[function(){
    return {
        scope:false,
        link:function(scope,element,attr){
            element.mouseenter(function(){
                element.addClass('bg-info')
            });

            element.mouseleave(function(){
                element.removeClass('bg-info');
            });

            element.click(function(){
                scope.$emit('clicked',scope.item);
            });
        }
    };
}]);
'use strict';

snow.controller('landingCtrl',['userFactory','$http','$scope','$window',function(userFactory,$http,$scope,$window){
    $scope.$on('clicked',function(event,item){
        $scope.showModal = true;
        $scope.chosen = item;
        if(!$scope.$$phase){
            $scope.$apply();//lets angular know something changed
        }
    });

    $scope.close = function(){
        $scope.showModal = false;
        $scope.chosen = null;
    };

    $scope.get = function(chosen){
        if($scope.num > 0){
            var data = {
                itemId:$scope.chosen.itemID,
                orderDate:new Date().toISOString().slice(0, 19).replace('T', ' '),
                itemQTY:$scope.num
            };
            console.log($scope.chosen);

            $http.post('/api/order',data,chosen).then(function(success){
                //successfully added
                $scope.close();
                userFactory.getUser().orders.push(success.data);//add order to user object
                userFactory.updateUser();
                $scope.$emit('updateCart');
                //TODO Add shopping cart functionality;
            }).catch(function(err){
                if(err.status){
                    $window.alert('Couldn\'t reach the server. Please try again');
                }else if(err.status === 401){
                    $window.alert('You have to be logged in to place an order');
                }else{
                    $window.alert('Something went wrong while trying to add item to your shopping cart. Please try again');
                }
            });
        }else{
            $window.alert('Must at least request 1 item');
        }

    };
    
    $http.get('/api/item').then(function(success){
        $scope.items = success.data;
    }).catch(function(err){
        if(err.status){
            $window.alert('Couldn\'t reach the server. Please try again');
        }else{
            $window.alert('Something went wrong while trying to load the items. Please try again.');
        }
    });
}]);
'use strict';

snow.controller('checkoutCtrl',['$http','$scope','$window',function($http,$scope,$window){
    $scope.total = 0;

    $http.get('/testItems').then(function(success){//will be items from shopping cart
        $scope.shoppingItems = success.data;

        $scope.shoppingItems.forEach(function(item){
            $scope.$watch(function(){
                return item.get;
            },function(){
                if(item.get){
                    $scope.total += item.price * item.quantity;
                }else{
                    if($scope.total > 0) $scope.total -= item.price * item.quantity;
                }
            });
        });
    });

    $scope.all = function(){
        $scope.shoppingItems.forEach(function(item){
            item.get = true;
        });
    };

    $scope.none = function(){
        $scope.shoppingItems.forEach(function(item){
            item.get = false;
        });
    };

    $scope.buy = function(){
        if($scope.shoppingItems.some(function(item){return item.get})){
            console.log('selected');
            //TODO: Purchase item
        }else{
            $window.alert('Please select at least 1 item to buy');
        }
    }
}]);
'use strict';

snow.controller('signupCtrl',['$http','$location','$scope','userFactory','$window',function($http,$location,$scope,userFactory,$window){
    $scope.register = function(){
        if($scope.registrationForm.$valid){
            var data = {
                firstName:$scope.fname,
                lastName:$scope.lname,
                username:$scope.username,
                password:$scope.password
            };

            $http.post('/api/customer',data).then(function(success){
                userFactory.setUser(success.data);

                data = {
                    addressLine1:$scope.address,
                    addressLine2:$scope.unit,
                    city:$scope.city,
                    state:$scope.state,
                    zipcode:$scope.zip
                };

                return $http.post('/api/address',data);
            }).then(function(){
                data = {
                    cardNumber:$scope.card.replace(/[\D]]/g,''),
                    expDate:$scope.expDate,
                    secCode:$scope.security
                };

                return $http.post('/api/paymentOption',data);
            }).then(function(){
                $window.alert('Successfully signed up!');
                $location.path('/');
            }).catch(function(err){
                if(err.status === 404){
                    $window.alert('Server couldn\'t be reached. Please try again at a later time');
                }else{
                    $window.alert('Something went wrong');
                }
            });
        }
    };

    $scope.$watch('password + password2',function(){//makes sure passwords match
        if($scope.password !== $scope.password2){
            $scope.registrationForm.password2.$setValidity('Passwords match',false);
        }else{
            $scope.registrationForm.password2.$setValidity('Passwords match',true);
        }
    });

    $scope.$watch('password',function(){
        if($scope.password !== undefined){
            var nonAlphaNumeric = $scope.password.replace(/[\dA-Za-z]/g,'');//filters out numbers and alphabetic characters

            if(nonAlphaNumeric.length === 0){
                $scope.registrationForm.password.$setValidity('Password doesn\'t meet criteria',false);
            }else{
                if($scope.password.length >= 8){
                    $scope.registrationForm.password.$setValidity('Password doesn\'t meet criteria',true);
                }
            }
        }
    });

    $scope.$watch('card',function(){//card validation
        if($scope.card !== undefined){
            var numbers = $scope.card.replace(/[\D]/g,'');
            $scope.card = $scope.card.replace(/[^\d-]/g,'');

            if(numbers.length > 5){
                $scope.registrationForm.card.$setValidity('Card Length',true);
            }else{
                $scope.registrationForm.card.$setValidity('Card Length',false);
            }
        }
    });
}]);
'use strict';

snow.controller('loginCtrl',['$http','$location','$scope','userFactory','$window',function($http,$location,$scope,userFactory,$window){
    $scope.login = function(){
        if($scope.loginForm.$valid){
            var data = 'Basic ' + window.btoa($scope.user + ':' + $scope.password);
            var authHeader = {headers:{Authorization:data}};

            localStorage.removeItem('user');//removes previous user on login attempt

            $http.get('/api/customer',authHeader).then(function(success){
                //successfully logged in
                userFactory.setUser(success.data);
                $location.path('/');
            }).catch(function(err){
                if(err.status == 404){
                    $window.alert('Server cannot be reached');
                }else if(err.status == 401){
                    $window.alert('Incorrect login/password');
                }else{
                    $window.alert('Unknown error has occured');
                }
            });
        }
    };
}]);